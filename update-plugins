#!/usr/bin/env node

console.log('Getting list of plugin updates...');

const spawnSync = require('child_process').spawnSync;

const pluginsPath = spawnSync('wp', ['plugin', 'path'], { encoding : 'utf8' });

// const gitPath = spawnSync('git', ['rev-parse', '--show-toplevel'], { encoding : 'utf8' });
// const gitAddPluginsPath = `${gitPath.stdout.trim()}/${pluginsPath.stdout.trim().split('./')[1]}`;
const gitAddPluginsPath = pluginsPath.stdout.trim();

const pluginUpdateAllJSON = spawnSync('wp', ['plugin', 'update', '--all', '--dry-run', '--format=json'], { encoding : 'utf8' });
let pluginsData = [];
let updatedPluginList = [];
let erroredPluginList = [];

try {
  pluginsData = JSON.parse(pluginUpdateAllJSON.stdout);
} catch (e) {
  console.log('Error getting list of plugin updates.');
  console.log(e);
  // console.log(pluginUpdateAllJSON);
  console.log(pluginUpdateAllJSON.stdout);
}

console.log('Updating plugins...\n');

for (let plugin of pluginsData) {
  let pluginUpdateJSON = spawnSync('wp', ['plugin', 'update', plugin.name, '--format=json'], { encoding : 'utf8' });
  let resultData;

  try {
    resultData = JSON.parse(pluginUpdateJSON.stdout);
  } catch (e) {
    console.log(`Error updating plugin ${plugin.name} from ${plugin.version} to ${plugin.update_version}`);
    console.log(e);
    console.log(pluginUpdateJSON.stdout);
    continue;
  }

  if (resultData[0].status == 'Updated') {
    const gitAdd = spawnSync('git', ['add', `${gitAddPluginsPath}/${plugin.name}`], { encoding : 'utf8' });
    let gitAddData;

    try {
      gitAddData = gitAdd;
      // gitAddData = JSON.parse(gitAdd.stdout);
    } catch (e) {
      // console.log(e);
      console.log('Error commiting plugin update.');
      console.log(gitAddData);
      console.log(gitAddData.stdout);
    }

    spawnSync('git', ['commit', '-m', `Update plugin ${plugin.name} from ${plugin.version} to ${plugin.update_version}`]);
    console.log(`Update plugin ${plugin.name} from ${plugin.version} to ${plugin.update_version}`);
    updatedPluginList.push(plugin);
  } else {
    console.log(`Error updating plugin ${plugin.name} from ${plugin.version} to ${plugin.update_version}`);
    erroredPluginList.push(plugin);
  }
}

console.log(`\n${updatedPluginList.length} Plugins Updated`);

if (updatedPluginList.length) {
  for (let updatedPlugin of updatedPluginList) {
    console.log(`${updatedPlugin.name} from ${updatedPlugin.version} to ${updatedPlugin.update_version}`);
  }
}

if (erroredPluginList.length) {
  console.log(`\n${erroredPluginList.length} Plugin Update Errors`);

  for (let erroredPlugin of erroredPluginList) {
    console.log(`${erroredPlugin.name} from ${erroredPlugin.version} to ${erroredPlugin.update_version}`);
  }
}
